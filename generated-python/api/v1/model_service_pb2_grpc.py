# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from api.v1 import model_service_pb2 as api_dot_v1_dot_model__service__pb2


class ModelInferenceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListModels = channel.unary_unary(
                '/api.v1.ModelInferenceService/ListModels',
                request_serializer=api_dot_v1_dot_model__service__pb2.ListModelsRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_model__service__pb2.ListModelsResponse.FromString,
                _registered_method=True)
        self.Inference = channel.stream_stream(
                '/api.v1.ModelInferenceService/Inference',
                request_serializer=api_dot_v1_dot_model__service__pb2.InferenceRequest.SerializeToString,
                response_deserializer=api_dot_v1_dot_model__service__pb2.InferenceResponse.FromString,
                _registered_method=True)


class ModelInferenceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListModels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inference(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelInferenceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListModels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListModels,
                    request_deserializer=api_dot_v1_dot_model__service__pb2.ListModelsRequest.FromString,
                    response_serializer=api_dot_v1_dot_model__service__pb2.ListModelsResponse.SerializeToString,
            ),
            'Inference': grpc.stream_stream_rpc_method_handler(
                    servicer.Inference,
                    request_deserializer=api_dot_v1_dot_model__service__pb2.InferenceRequest.FromString,
                    response_serializer=api_dot_v1_dot_model__service__pb2.InferenceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.v1.ModelInferenceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('api.v1.ModelInferenceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ModelInferenceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListModels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.v1.ModelInferenceService/ListModels',
            api_dot_v1_dot_model__service__pb2.ListModelsRequest.SerializeToString,
            api_dot_v1_dot_model__service__pb2.ListModelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Inference(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/api.v1.ModelInferenceService/Inference',
            api_dot_v1_dot_model__service__pb2.InferenceRequest.SerializeToString,
            api_dot_v1_dot_model__service__pb2.InferenceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
