// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/model_service.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ModelInferenceService_ListModels_FullMethodName = "/api.v1.ModelInferenceService/ListModels"
	ModelInferenceService_Inference_FullMethodName  = "/api.v1.ModelInferenceService/Inference"
)

// ModelInferenceServiceClient is the client API for ModelInferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelInferenceServiceClient interface {
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error)
	Inference(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InferenceRequest, InferenceResponse], error)
}

type modelInferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelInferenceServiceClient(cc grpc.ClientConnInterface) ModelInferenceServiceClient {
	return &modelInferenceServiceClient{cc}
}

func (c *modelInferenceServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (*ListModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListModelsResponse)
	err := c.cc.Invoke(ctx, ModelInferenceService_ListModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelInferenceServiceClient) Inference(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[InferenceRequest, InferenceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ModelInferenceService_ServiceDesc.Streams[0], ModelInferenceService_Inference_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[InferenceRequest, InferenceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelInferenceService_InferenceClient = grpc.BidiStreamingClient[InferenceRequest, InferenceResponse]

// ModelInferenceServiceServer is the server API for ModelInferenceService service.
// All implementations must embed UnimplementedModelInferenceServiceServer
// for forward compatibility.
type ModelInferenceServiceServer interface {
	ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error)
	Inference(grpc.BidiStreamingServer[InferenceRequest, InferenceResponse]) error
	mustEmbedUnimplementedModelInferenceServiceServer()
}

// UnimplementedModelInferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedModelInferenceServiceServer struct{}

func (UnimplementedModelInferenceServiceServer) ListModels(context.Context, *ListModelsRequest) (*ListModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedModelInferenceServiceServer) Inference(grpc.BidiStreamingServer[InferenceRequest, InferenceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Inference not implemented")
}
func (UnimplementedModelInferenceServiceServer) mustEmbedUnimplementedModelInferenceServiceServer() {}
func (UnimplementedModelInferenceServiceServer) testEmbeddedByValue()                               {}

// UnsafeModelInferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModelInferenceServiceServer will
// result in compilation errors.
type UnsafeModelInferenceServiceServer interface {
	mustEmbedUnimplementedModelInferenceServiceServer()
}

func RegisterModelInferenceServiceServer(s grpc.ServiceRegistrar, srv ModelInferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedModelInferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ModelInferenceService_ServiceDesc, srv)
}

func _ModelInferenceService_ListModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelInferenceServiceServer).ListModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModelInferenceService_ListModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelInferenceServiceServer).ListModels(ctx, req.(*ListModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelInferenceService_Inference_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ModelInferenceServiceServer).Inference(&grpc.GenericServerStream[InferenceRequest, InferenceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ModelInferenceService_InferenceServer = grpc.BidiStreamingServer[InferenceRequest, InferenceResponse]

// ModelInferenceService_ServiceDesc is the grpc.ServiceDesc for ModelInferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModelInferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.ModelInferenceService",
	HandlerType: (*ModelInferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListModels",
			Handler:    _ModelInferenceService_ListModels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Inference",
			Handler:       _ModelInferenceService_Inference_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/model_service.proto",
}
