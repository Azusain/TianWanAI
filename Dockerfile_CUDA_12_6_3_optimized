# Optimized multi-stage build for tianwan AI inference
# Target: Reduce image size from ~13GB to ~6-8GB

# Stage 1: Model and dependencies downloader
FROM ubuntu:22.04 AS downloader
ENV WORKDIR=/root
WORKDIR ${WORKDIR}

# Install minimal dependencies for git-lfs and model downloading
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        curl \
        ca-certificates \
        git \
        git-lfs && \
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | bash && \
    apt-get install -y git-lfs && \
    rm -rf /var/lib/apt/lists/*

# Copy only essential files (respect .dockerignore)
COPY . ${WORKDIR}

# Download models and clean up unnecessary files
RUN git lfs install && \
    git lfs pull && \
    git submodule update --init --recursive && \
    # Clean up training and development files
    rm -rf dataset/ && \
    rm -rf logs/ && \
    rm -rf __pycache__/ && \
    rm -rf .git/ && \
    rm -rf tools/ && \
    rm -rf Scripts/ && \
    rm -rf Include/ && \
    rm -rf Lib/ && \
    rm -rf share/ && \
    rm -f train.py && \
    rm -f train.yaml && \
    rm -f pyvenv.cfg && \
    # Keep only necessary files
    find . -name "*.pyc" -delete && \
    find . -name "__pycache__" -type d -exec rm -rf {} + || true

# Stage 2: Optimized runtime environment
FROM nvidia/cuda:12.6.3-runtime-ubuntu22.04 AS runtime
ENV WORKDIR=/root
ENV PATH="${WORKDIR}/venv/bin:$PATH"
WORKDIR ${WORKDIR}

# Set timezone and install minimal runtime dependencies
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3.11 \
        python3.11-venv \
        python3-pip \
        libgl1-mesa-glx \
        libglib2.0-0 \
        curl && \
    python3.11 -m venv venv && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy only essential files from downloader stage
COPY --from=downloader ${WORKDIR}/models/ ${WORKDIR}/models/
COPY --from=downloader ${WORKDIR}/*.py ${WORKDIR}/
COPY --from=downloader ${WORKDIR}/requirements.txt ${WORKDIR}/
COPY --from=downloader ${WORKDIR}/run.bash ${WORKDIR}/
COPY --from=downloader ${WORKDIR}/version ${WORKDIR}/

# Install Python dependencies with optimizations
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir torch torchvision --index-url https://download.pytorch.org/whl/cu126 && \
    pip install --no-cache-dir -r requirements.txt && \
    # Clean pip cache
    pip cache purge

# Create non-root user for security
RUN useradd -r -s /bin/false -m -d /app appuser && \
    chown -R appuser:appuser ${WORKDIR}

# Health check for the service
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Switch to non-root user
USER appuser

# Expose the application port
EXPOSE 5000

# Start the application
CMD ["bash", "run.bash"]
