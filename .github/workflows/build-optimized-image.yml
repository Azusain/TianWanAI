name: Build Optimized Tianwan Docker Image

on:
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Docker image tag suffix (e.g., "optimized", "v2-optimized")'
        required: false
        default: 'optimized'
        type: string
      push_to_registry:
        description: 'Push to Docker registry'
        required: false
        default: true
        type: boolean
      dockerfile:
        description: 'Dockerfile to use'
        required: false
        default: 'Dockerfile_CUDA_12_6_3_optimized'
        type: choice
        options:
          - 'Dockerfile_CUDA_12_6_3_optimized'
          - 'Dockerfile_CUDA_11_1_1'
          - 'Dockerfile_CUDA_10_2'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true  # Enable Git LFS for large model files

      - name: Checkout LFS objects
        run: git lfs pull

      - name: Read version from file
        id: version
        run: |
          VERSION=$(cat version)
          FULL_TAG="${VERSION}-${{ inputs.tag_suffix }}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "FULL_TAG=${FULL_TAG}" >> $GITHUB_ENV
          echo "Base version: ${VERSION}"
          echo "Full tag: ${FULL_TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-optimized-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-optimized-
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        if: ${{ inputs.push_to_registry }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./${{ inputs.dockerfile }}
          platforms: linux/amd64  # Only amd64 for CUDA support
          push: ${{ inputs.push_to_registry }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/tianwan:${{ env.FULL_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/tianwan:latest-optimized
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDTIME=${{ github.run_id }}
            VERSION=${{ env.VERSION }}
            REVISION=${{ github.sha }}

      - name: Generate build summary
        run: |
          echo "## 🎯 Optimized Build Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Image Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** \`${{ secrets.DOCKER_USERNAME }}/tianwan\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** \`${{ env.FULL_TAG }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Dockerfile:** \`${{ inputs.dockerfile }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** \`linux/amd64\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Usage Examples:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Basic run:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --gpus all -p 5000:5000 \\\\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ secrets.DOCKER_USERNAME }}/tianwan:${{ env.FULL_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**With volume mount:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --gpus all -d --name tianwan-optimized \\\\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 5000:5000 \\\\" >> $GITHUB_STEP_SUMMARY
          echo "  -v \$(pwd)/logs:/root/logs \\\\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ secrets.DOCKER_USERNAME }}/tianwan:${{ env.FULL_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Optimization Benefits:" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Removed:** Training dataset (~363MB)" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Removed:** Development tools and logs (~150MB)" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Removed:** Git history and LFS cache (~50MB)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Added:** Security improvements (non-root user)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Added:** Health checks and proper cleanup" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 **Expected size reduction:** ~4-5GB (from 13.5GB to ~8-9GB)" >> $GITHUB_STEP_SUMMARY

  notify:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notify Discord
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "🎯 Optimized Build: ${{ github.repository }} - ${{ env.FULL_TAG }}"
          description: |
            **Workflow:** ${{ github.workflow }}
            **Status:** ${{ needs.build.result }}
            **Tag:** ${{ env.FULL_TAG }}
            **Dockerfile:** ${{ inputs.dockerfile }}
            **Repository:** ${{ github.repository }}
            **Run URL:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Expected image size: ~8-9GB (reduced from 13.5GB)
          include-details: "false"
          color-success: "#17cf48"
          color-failure: "#eb4034"
          color-cancelled: "#42daf5"
